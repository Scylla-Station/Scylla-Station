using System.Linq;
using Content.Client.Stylesheets;
using Content.Shared.Consent;
using Content.Shared.Consent.Prototypes;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.ResourceManagement;
using static Robust.Client.UserInterface.Controls.BoxContainer;
using Robust.Client.UserInterface;
using System.Numerics;

namespace Content.Client.Consent.UI;

[GenerateTypedNameReferences]
public sealed partial class ViewConsentWindow : DefaultWindow
{
    private readonly IPrototypeManager _prototypeManager;
    private readonly SpriteSystem _spriteSystem;
    private readonly IResourceCache _resourceCache;

    public ViewConsentWindow()
    {
        RobustXamlLoader.Load(this);
        _prototypeManager = IoCManager.Resolve<IPrototypeManager>();
        _spriteSystem = IoCManager.Resolve<IEntityManager>().System<SpriteSystem>();
        _resourceCache = IoCManager.Resolve<IResourceCache>();
    }

    public void Populate(string targetName, Dictionary<ProtoId<ConsentPrototype>, ConsentLevel> consentPreferences)
    {
        TargetNameLabel.Text = Loc.GetString("view-consent-window-target-name", ("target", targetName));
        ConsentsVBox.DisposeAllChildren();

        var categoryHeaderColor = Color.FromHex("#A0A0C0");
        var cardBorderColor = Color.FromHex("#454550");
        var nameLabelColor = Color.FromHex("#E0E0E0");
        var descriptionLabelColor = Color.FromHex("#B0B0B0");

        var prototypes = _prototypeManager.EnumeratePrototypes<ConsentPrototype>()
            .OrderBy(p => p.Category)
            .ThenBy(p => Loc.GetString(p.Name))
            .ToList();

        if (!prototypes.Any())
        {
            ConsentsVBox.AddChild(new Label { Text = Loc.GetString("humanoid-profile-editor-no-consents-available") });
            return;
        }

        string? currentCategory = null;

        foreach (var proto in prototypes)
        {
            if (proto.Category != currentCategory)
            {
                currentCategory = proto.Category;
                var categoryLabel = new Label
                {
                    Text = Loc.GetString(currentCategory ?? "consent-category-uncategorized"),
                    FontColorOverride = categoryHeaderColor,
                    StyleClasses = { StyleBase.StyleClassLabelHeading },
                    HorizontalAlignment = HAlignment.Center,
                    Margin = new Thickness(0, 15, 0, 8)
                };
                categoryLabel.FontOverride = new VectorFont(_resourceCache.GetResource<FontResource>("/Fonts/NotoSansDisplay/NotoSans-Bold.ttf"), 18);
                ConsentsVBox.AddChild(categoryLabel);
            }

            var consentLevel = consentPreferences.GetValueOrDefault(new ProtoId<ConsentPrototype>(proto.ID), ConsentLevel.Ask);

            var cardPanel = new PanelContainer
            {
                PanelOverride = new StyleBoxFlat
                {
                    BackgroundColor = ConsentLevelHelpers.GetColorForConsentLevel(consentLevel),
                    BorderColor = cardBorderColor,
                    BorderThickness = new Thickness(1),
                    ContentMarginTopOverride = 8,
                    ContentMarginBottomOverride = 8,
                    ContentMarginLeftOverride = 10,
                    ContentMarginRightOverride = 10,
                },
                Margin = new Thickness(0, 0, 0, 8),
                ToolTip = Loc.GetString(proto.Description)
            };

            var cardHBox = new BoxContainer
            {
                Orientation = LayoutOrientation.Horizontal,
                HorizontalExpand = true,
                VerticalAlignment = VAlignment.Center
            };

            var icon = new TextureRect
            {
                Texture = _spriteSystem.Frame0(proto.Icon),
                MinSize = new Vector2(24, 24),
                TextureScale = new Vector2(1, 1),
                VerticalAlignment = VAlignment.Center,
                Margin = new Thickness(0, 0, 10, 0)
            };
            if (proto.Icon.Equals(SpriteSpecifier.Invalid))
                icon.Texture = _resourceCache.GetResource<TextureResource>("/Textures/Interface/question.svg.192dpi.png");

            cardHBox.AddChild(icon);

            var textVBox = new BoxContainer
            {
                Orientation = LayoutOrientation.Vertical,
                VerticalAlignment = VAlignment.Center,
                HorizontalExpand = true
            };

            var nameLabel = new Label
            {
                Text = Loc.GetString(proto.Name),
                FontColorOverride = nameLabelColor,
                VerticalAlignment = VAlignment.Center
            };
            nameLabel.FontOverride = new VectorFont(_resourceCache.GetResource<FontResource>("/Fonts/NotoSansDisplay/NotoSans-Bold.ttf"), 13);

            var descriptionLabel = new Label
            {
                Text = string.IsNullOrWhiteSpace(proto.Description) ? " " : Loc.GetString(proto.Description),
                FontColorOverride = descriptionLabelColor,
                VerticalAlignment = VAlignment.Center,
                ClipText = true
            };
            descriptionLabel.FontOverride = new VectorFont(_resourceCache.GetResource<FontResource>("/Fonts/NotoSansDisplay/NotoSans-BoldItalic.ttf"), 11);

            textVBox.AddChild(nameLabel);
            textVBox.AddChild(descriptionLabel);
            cardHBox.AddChild(textVBox);

            cardHBox.AddChild(new Control { HorizontalExpand = true });

            var levelLabel = new Label
            {
                Text = ConsentLevelHelpers.GetConsentLevelText(consentLevel),
                MinWidth = 150,
                Align = Label.AlignMode.Center,
                VerticalAlignment = VAlignment.Center,
                HorizontalAlignment = HAlignment.Right
            };
            levelLabel.FontOverride = new VectorFont(_resourceCache.GetResource<FontResource>("/Fonts/NotoSansDisplay/NotoSans-Bold.ttf"), 12);

            cardHBox.AddChild(levelLabel);
            cardPanel.AddChild(cardHBox);
            ConsentsVBox.AddChild(cardPanel);
        }
    }
}
