using System.Linq;
using Content.Client.Stylesheets;
using Content.Shared.Scylla.Consent;
using Content.Shared.Scylla.Consent.Prototypes;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.ResourceManagement;
using static Robust.Client.UserInterface.Controls.BoxContainer;
using System.Numerics;

namespace Content.Client.Scylla.Consent.UI;

[GenerateTypedNameReferences]
public sealed partial class ViewConsentWindow : DefaultWindow
{
    private readonly IPrototypeManager _prototypeManager;
    private readonly SpriteSystem _spriteSystem;
    private readonly IResourceCache _resourceCache;

    public ViewConsentWindow()
    {
        RobustXamlLoader.Load(this);
        _prototypeManager = IoCManager.Resolve<IPrototypeManager>();
        _spriteSystem = IoCManager.Resolve<IEntityManager>().System<SpriteSystem>();
        _resourceCache = IoCManager.Resolve<IResourceCache>();
    }

    public void Populate(string targetName, Dictionary<ProtoId<ConsentPrototype>, ConsentLevel> consentPreferences)
    {
        TargetNameLabel.Text = Loc.GetString("view-consent-window-target-name", ("target", targetName));
        ConsentsVBox.DisposeAllChildren();

        var categoryHeaderColor = Color.FromHex("#B0B8C0");
        var nameLabelColor = Color.FromHex("#E0E0E0");
        var levelTextColor = Color.FromHex("#C0C0C0");

        var prototypes = _prototypeManager.EnumeratePrototypes<ConsentPrototype>()
            .OrderBy(p => p.Category)
            .ThenBy(p => Loc.GetString(p.Name))
            .ToList();

        if (!prototypes.Any())
        {
            ConsentsVBox.AddChild(new Label { Text = Loc.GetString("humanoid-profile-editor-no-consents-available") });
            return;
        }

        string? currentCategory = null;

        foreach (var proto in prototypes)
        {
            if (proto.Category != currentCategory)
            {
                currentCategory = proto.Category;
                var categoryLabel = new Label
                {
                    Text = Loc.GetString(currentCategory ?? "consent-category-uncategorized"),
                    FontColorOverride = categoryHeaderColor,
                    StyleClasses = { StyleBase.StyleClassLabelHeading },
                    HorizontalAlignment = HAlignment.Left,
                    Margin = new Thickness(5, 10, 5, 5)
                };
                ConsentsVBox.AddChild(categoryLabel);
            }

            var consentLevel = consentPreferences.GetValueOrDefault(new ProtoId<ConsentPrototype>(proto.ID), ConsentLevel.Ask);

            var itemRowPanel = new PanelContainer
            {
                PanelOverride = new StyleBoxFlat
                {
                    BackgroundColor = ConsentLevelHelpers.GetColorForConsentLevel(consentLevel),
                },
                HorizontalExpand = true,
                Margin = new Thickness(3, 1, 3, 1),
                ToolTip = Loc.GetString(proto.Description)
            };

            var itemContentHBox = new BoxContainer
            {
                Orientation = LayoutOrientation.Horizontal,
                HorizontalExpand = true,
                VerticalAlignment = VAlignment.Center,
                Margin = new Thickness(4, 2, 4, 2)
            };

            var icon = new TextureRect
            {
                Texture = _spriteSystem.Frame0(proto.Icon),
                MinSize = new Vector2(10, 10),
                TextureScale = Vector2.One,
                VerticalAlignment = VAlignment.Center,
                Margin = new Thickness(0, 0, 8, 0)
            };
            if (proto.Icon.Equals(SpriteSpecifier.Invalid))
                icon.Texture = _resourceCache.GetResource<TextureResource>("/Textures/Interface/question.svg.192dpi.png");
            itemContentHBox.AddChild(icon);

            var nameLabel = new Label
            {
                Text = Loc.GetString(proto.Name),
                FontColorOverride = nameLabelColor,
                VerticalAlignment = VAlignment.Center,
                HorizontalExpand = true
            };
            itemContentHBox.AddChild(nameLabel);

            var levelLabel = new Label
            {
                Text = ConsentLevelHelpers.GetConsentLevelText(consentLevel),
                FontColorOverride = levelTextColor,
                VerticalAlignment = VAlignment.Center,
                HorizontalAlignment = HAlignment.Right,
                Margin = new Thickness(5,0,0,0)
            };
            itemContentHBox.AddChild(levelLabel);
            itemRowPanel.AddChild(itemContentHBox);
            ConsentsVBox.AddChild(itemRowPanel);
        }
    }
}
